import {IServiceOptions, Node, Service, ITCPListenerOptions, Context, Route, TCPListener} from '@sora-soft/framework';
import {TypeGuard, ValidateClass} from '@sora-soft/type-guard';
import {<%- serviceNameEnum %>} from '<%- serviceNameServiceRelativePath %>.js';
import {<%- upperCamelCaseServiceName %>Handler} from '<%- handlerRelativePath %>.js';

export interface I<%- upperCamelCaseServiceName %>Options extends IServiceOptions {
  tcpListener: ITCPListenerOptions;
}

@ValidateClass()
class <%- upperCamelCaseServiceName %>Service extends Service {
  static register() {
    Node.registerService(<%- serviceNameEnum %>.<%- upperCamelCaseServiceName %>, (options: I<%- upperCamelCaseServiceName %>Options) => {
      return new <%- upperCamelCaseServiceName %>Service(<%- serviceNameEnum %>.<%- upperCamelCaseServiceName %>, options);
    });
  }

  constructor(name: string, options: I<%- upperCamelCaseServiceName %>Options) {
    super(name, options);
    TypeGuard.assert<I<%- upperCamelCaseServiceName %>Options>(options);
    this.<%- serviceName %>Options_ = options;
  }

  protected async startup(ctx: Context) {
    const route = new <%- upperCamelCaseServiceName %>Handler();
    const listener = new TCPListener(this.<%- serviceName %>Options_.tcpListener, Route.callback(route));
    await this.installListener(listener, ctx);
  }

  protected async shutdown() {}

  private <%- serviceName %>Options_: I<%- upperCamelCaseServiceName %>Options;
}

export {<%- upperCamelCaseServiceName %>Service}
